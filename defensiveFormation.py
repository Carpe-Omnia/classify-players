import os
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from matplotlib.offsetbox import OffsetImage, AnnotationBbox
from PIL import Image # For robust image loading/handling if needed
import matplotlib.patheffects as pe # Ensure this is imported for text effects
import matplotlib.patches as mpatches # Import for creating custom legend handles

def create_defensive_formation_graphic(input_charts_dir="race_composition_charts_for_embedding",
                                       output_graphic_dir="formation_graphics",
                                       output_graphic_filename="defensive_formation_race_composition.png"):
    """
    Creates a composite graphic showing demographic pie charts for various defensive positions
    arranged in a typical 4-3 defensive formation with a legend, flipped for common viewing.
    """
    
    os.makedirs(output_graphic_dir, exist_ok=True)
    
    print(f"Reading individual pie charts from: {input_charts_dir}")
    print(f"Generating composite graphic and saving to: {os.path.join(output_graphic_dir, output_graphic_filename)}")

    # Define the racial categories and their colors (consistent with embedding charts)
    racial_categories = {
        'White': '#D2B48C',       # Tan Beige
        'Black': '#4A2C2A',       # Chocolatey Brown
        'Other': '#808080'        # Grey for "Other"
    }

    # --- Define 4-3 Defensive Formation Positions and their approximate coordinates ---
    # Flipped: Defensive Line at the bottom (lower Y), Secondary at the top (higher Y).
    # (0,0) is bottom-left, (100,y_max) is top-right.
    # X-values from 0-100 (width of field), Y-values from 0-40 (depth)
    defensive_formation_layout = {
        # Defensive Line (4 players - 2 DEs, 2 DTs) - Closer to the "line of scrimmage" at the bottom
        'LDE': {'coords': (25, 10), 'label': 'LDE'},  # Left Defensive End
        'LDT': {'coords': (45, 10), 'label': 'LDT'},  # Left Defensive Tackle
        'RDT': {'coords': (55, 10), 'label': 'RDT'},  # Right Defensive Tackle
        'RDE': {'coords': (75, 10), 'label': 'RDE'},  # Right Defensive End

        # Linebackers (3 players - 2 OLB, 1 MLB) - Middle depth
        'LOLB': {'coords': (35, 20), 'label': 'LOLB'}, # Left Outside Linebacker
        'MLB': {'coords': (50, 20), 'label': 'MLB'},  # Middle Linebacker
        'ROLB': {'coords': (65, 20), 'label': 'ROLB'}, # Right Outside Linebacker

        # Secondary (4 players - 2 CBs, 2 Safeties) - Farthest back, at the top
        'LCB': {'coords': (10, 30), 'label': 'LCB'},  # Left Cornerback
        'FS': {'coords': (40, 35), 'label': 'FS'},   # Free Safety 
        'SS': {'coords': (60, 35), 'label': 'SS'},   # Strong Safety 
        'RCB': {'coords': (90, 30), 'label': 'RCB'},  # Right Cornerback
    }

    # Map positions in the layout to the filenames generated by nfl_race_composition_for_embedding.py
    # Using generic position names that are likely generated for pie charts (e.g., 'DE' not 'LDE')
    position_chart_filenames = {
        'LDE': 'position_lde_race_composition.png',
        'LDT': 'position_ldt_race_composition.png',
        'RDT': 'position_rdt_race_composition.png',
        'RDE': 'position_rde_race_composition.png',
        
        'LOLB': 'position_lilb_race_composition.png', 
        'MLB': 'position_mlb_race_composition.png', 
        'ROLB': 'position_rilb_race_composition.png', 

        'LCB': 'position_lcb_race_composition.png',
        'FS': 'position_fs_race_composition.png', 
        'SS': 'position_ss_race_composition.png', 
        'RCB': 'position_rcb_race_composition.png',
    }

    fig, ax = plt.subplots(figsize=(18, 12)) # Adjust figure size for a larger canvas
    ax.set_facecolor('#006400') # Dark Green background for "field" effect (consistent)
    
    # Updated Title for defensive formation
    ax.set_title('Racial Composition of NFL Defensive Players (4-3 Formation)', fontsize=20, color='black', pad=30)
    
    ax.set_xticks([]) # Hide x-axis ticks
    ax.set_yticks([]) # Hide y-axis ticks
    ax.set_xlim(0, 100) # Set fixed axis limits for consistent positioning
    ax.set_ylim(0, 40) # Adjust y-limits to fit the formation depth

    # --- Add general field lines for context (adjusted for flipped defense) ---
    ax.axhline(y=5, color='white', linestyle='--', alpha=0.5, linewidth=1) # "Line of scrimmage" for defensive line
    ax.axhline(y=15, color='white', linestyle='--', alpha=0.5, linewidth=1) # Linebacker depth
    ax.axhline(y=25, color='white', linestyle='--', alpha=0.5, linewidth=1) # Secondary depth
    ax.axvline(x=50, color='white', linestyle=':', alpha=0.3, linewidth=1) # Center line

    try:
        # Add all the position charts
        for pos_key, details in defensive_formation_layout.items():
            pos_label = details['label']
            coords = details['coords']
            chart_filename = position_chart_filenames.get(pos_key)
            
            if not chart_filename:
                print(f"Warning: No chart filename mapping for position key '{pos_key}'. Skipping.")
                continue

            chart_path = os.path.join(input_charts_dir, chart_filename)

            if os.path.exists(chart_path):
                try:
                    # Load the pie chart image
                    pie_chart_img = mpimg.imread(chart_path)
                    
                    # Use OffsetImage to embed the pie chart
                    imagebox = OffsetImage(pie_chart_img, zoom=0.25) # Consistent zoom with offensive graphic
                    
                    # Create an AnnotationBbox to place the image at the specified coordinates
                    ab = AnnotationBbox(imagebox, coords, frameon=False, pad=0.0)
                    ax.add_artist(ab)

                    # Add position label text below the pie chart
                    # Y-coordinate adjusted for vertical spacing
                    ax.text(coords[0], coords[1] - 3, pos_label, 
                            color='white', fontsize=12, ha='center', va='top', 
                            path_effects=[pe.withStroke(linewidth=3, foreground="black")]) # Black outline for readability

                    print(f"  Added chart for {pos_label} at {coords}")

                except Exception as e:
                    print(f"Error embedding chart for {pos_key} from {chart_path}: {e}")
            else:
                print(f"Warning: Pie chart file not found for {pos_key} at {chart_path}. Skipping.")
        
        # --- Add Legend ---
        # Create custom legend handles
        legend_patches = [
            mpatches.Patch(color=racial_categories['White'], label='White'),
            mpatches.Patch(color=racial_categories['Black'], label='Black'),
            mpatches.Patch(color=racial_categories['Other'], label='Other Demographics')
        ]
        
        # Add the legend to the plot (loc and bbox_to_anchor for placement)
        # Adjusted bbox_to_anchor to position the legend in line with linebackers (y=20)
        legend = ax.legend(handles=legend_patches, 
                          title='Race Composition',
                          loc='center left', # Changed from 'lower left' for better vertical control
                          bbox_to_anchor=(0.05, 0.5),  # Adjusted Y-coordinate (0.5 means vertical center of axes)
                          fontsize=16,  
                          title_fontsize=18,  
                          facecolor='white',
                          edgecolor='black',
                          framealpha=0.9,  
                          borderpad=1.5,  
                          handletextpad=1.5,  
                          labelspacing=1.2)  
        
        # Make the legend text more readable 
        for text in legend.get_texts():
            text.set_color('black')
            text.set_path_effects([pe.withStroke(linewidth=2, foreground="white")])
        
        legend.get_title().set_color('black')
        legend.get_title().set_path_effects([pe.withStroke(linewidth=2, foreground="white")])

        # --- Save the composite graphic ---
        output_filepath = os.path.join(output_graphic_dir, output_graphic_filename)
        plt.tight_layout()
        plt.savefig(output_filepath, dpi=300, bbox_inches='tight', facecolor=fig.get_facecolor()) # Save with background color
        plt.close()
        print(f"\nComposite graphic saved to: {output_filepath}")

    except Exception as e:
        print(f"An unexpected error occurred: {e}")

if __name__ == "__main__":
    create_defensive_formation_graphic()
