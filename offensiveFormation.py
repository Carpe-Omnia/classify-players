import os
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from matplotlib.offsetbox import OffsetImage, AnnotationBbox
from PIL import Image # For robust image loading/handling if needed
import matplotlib.patheffects as pe # Ensure this is imported for text effects

def create_offensive_formation_graphic(input_charts_dir="race_composition_charts",
                                       output_graphic_dir="formation_graphics",
                                       output_graphic_filename="offensive_formation_race_composition.png"):
    """
    Creates a composite graphic showing demographic pie charts for various offensive positions
    arranged in a typical offensive formation.
    """
    
    os.makedirs(output_graphic_dir, exist_ok=True)
    
    print(f"Reading individual pie charts from: {input_charts_dir}")
    print(f"Generating composite graphic and saving to: {os.path.join(output_graphic_dir, output_graphic_filename)}")

    # --- 1. Define Offensive Formation Positions and their approximate coordinates ---
    # These coordinates are illustrative and might need adjustment based on chart sizes
    # and desired layout. (0,0) is bottom-left, (1,1) is top-right.
    # This represents a basic shotgun formation (1 QB, 1 RB, 2 WR, 1 TE, 5 OL)
    # The values are adjusted to create some spacing and a visual formation
    
    # Coordinates (x, y) for the center of where each pie chart image will be placed.
    # The values are relative to the plot's coordinate system (e.g., 0 to 100 for x and y)
    offensive_formation_layout = {
        'C': {'coords': (50, 30), 'label': 'C'},
        'LG': {'coords': (40, 30), 'label': 'LG'},
        'RG': {'coords': (60, 30), 'label': 'RG'},
        'LT': {'coords': (30, 30), 'label': 'LT'},
        'RT': {'coords': (70, 30), 'label': 'RT'},
        'QB': {'coords': (50, 20), 'label': 'QB'},
        'RB': {'coords': (50, 10), 'label': 'RB'}, # Behind QB
        'WR1': {'coords': (5, 30), 'label': 'WR'}, # Left outside
        'WR2': {'coords': (85, 30), 'label': 'WR'}, # Right outside
        'TE': {'coords': (20, 30), 'label': 'TE'}, # Tight End (left)
        'FB': {'coords': (50, 5), 'label': 'FB'}, # Fullback (optional, right of QB)
        # You can add more like FB, another TE, etc., and adjust coordinates.
        # Ensure the filename suffix corresponds to how nfl_race_composition_analysis saves them
    }

    # Map positions in the layout to the filenames generated by the previous script
    # This might require some manual mapping if your formation uses generic labels like 'WR1'
    # but the charts are named by 'WR'. We'll use the specific position name for filename suffix.
    position_chart_filenames = {
        'C': 'position_c_race_composition.png',
        'LG': 'position_lg_race_composition.png',
        'RG': 'position_rg_race_composition.png',
        'LT': 'position_lt_race_composition.png',
        'RT': 'position_rt_race_composition.png',
        'QB': 'position_qb_race_composition.png',
        'RB': 'position_rb_race_composition.png',
        'WR1': 'position_wr_race_composition.png', # Using generic WR chart for both WR1 and WR2
        'WR2': 'position_wr_race_composition.png',
        'TE': 'position_te_race_composition.png',
        'FB': 'position_fb_race_composition.png', # 
    }

    fig, ax = plt.subplots(figsize=(18, 12)) # Adjust figure size for a larger canvas
    ax.set_facecolor('#006400') # Dark Green background for "field" effect
    ax.set_title('NFL Offensive Formation: Player Race Composition', fontsize=20, color='white', pad=30)
    ax.set_xticks([]) # Hide x-axis ticks
    ax.set_yticks([]) # Hide y-axis ticks
    ax.set_xlim(0, 100) # Set fixed axis limits for consistent positioning
    ax.set_ylim(0, 40) # Adjust y-limits to fit the formation

    # --- Add general field lines for context (optional) ---
    ax.axhline(y=15, color='white', linestyle='--', alpha=0.5, linewidth=1) # Line of scrimmage (approx)
    ax.axhline(y=25, color='white', linestyle='--', alpha=0.5, linewidth=1) # Secondary line
    ax.axvline(x=50, color='white', linestyle=':', alpha=0.3, linewidth=1) # Center line

    try:
        for pos_key, details in offensive_formation_layout.items():
            pos_label = details['label']
            coords = details['coords']
            chart_filename = position_chart_filenames.get(pos_key)
            
            if not chart_filename:
                print(f"Warning: No chart filename mapping for position key '{pos_key}'. Skipping.")
                continue

            chart_path = os.path.join(input_charts_dir, chart_filename)

            if os.path.exists(chart_path):
                try:
                    # Load the pie chart image
                    pie_chart_img = mpimg.imread(chart_path)
                    
                    # Use OffsetImage to embed the pie chart
                    # ADJUSTED: Reduced zoom significantly to prevent overlapping
                    imagebox = OffsetImage(pie_chart_img, zoom=0.05) 
                    
                    # Create an AnnotationBbox to place the image at the specified coordinates
                    ab = AnnotationBbox(imagebox, coords, frameon=False, pad=0.0)
                    ax.add_artist(ab)

                    # Add position label text below the pie chart
                    ax.text(coords[0], coords[1] - 3, pos_label, 
                            color='white', fontsize=12, ha='center', va='top', 
                            path_effects=[pe.withStroke(linewidth=3, foreground="black")]) # Black outline for readability

                    print(f"  Added chart for {pos_label} at {coords}")

                except Exception as e:
                    print(f"Error embedding chart for {pos_key} from {chart_path}: {e}")
            else:
                print(f"Warning: Pie chart file not found for {pos_key} at {chart_path}. Skipping.")
        
        # --- Save the composite graphic ---
        output_filepath = os.path.join(output_graphic_dir, output_graphic_filename)
        plt.tight_layout()
        plt.savefig(output_filepath, dpi=300, bbox_inches='tight', facecolor=fig.get_facecolor()) # Save with background color
        plt.close()
        print(f"\nComposite graphic saved to: {output_filepath}")

    except Exception as e:
        print(f"An unexpected error occurred: {e}")

if __name__ == "__main__":
    create_offensive_formation_graphic()
